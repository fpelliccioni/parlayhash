./boost_hash,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=23,mops=39
./boost_hash,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=23,mops=39
./boost_hash,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=10,mops=19
./boost_hash,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=11,mops=18

./boost_hash,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=23,mops=38
./boost_hash,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=22,mops=38
./boost_hash,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=11,mops=18
./boost_hash,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=11,mops=18

./boost_hash,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=23,mops=32
./boost_hash,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=22,mops=32
./boost_hash,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=10,mops=14
./boost_hash,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=10,mops=14

./boost_hash,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=38
./boost_hash,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=38
./boost_hash,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=9,mops=24
./boost_hash,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=10,mops=24

./boost_hash,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=20,mops=38
./boost_hash,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=37
./boost_hash,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=10,mops=22
./boost_hash,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=9,mops=21

./boost_hash,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=32
./boost_hash,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=32
./boost_hash,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=10,mops=19
./boost_hash,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=10,mops=18

./boost_hash,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=23,mops=40
./boost_hash,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=23,mops=40
./boost_hash,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=11,mops=19
./boost_hash,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=10,mops=18

./boost_hash,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=5,mops=21
./boost_hash,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=5,mops=22
./boost_hash,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=5,mops=21
./boost_hash,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=5,mops=21
./boost_hash,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=5,mops=16
./boost_hash,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=5,mops=16

initial insert geometric mean of mops = 8.70116
benchmark geometric mean of mops = 25.3311
bytes/element geometric mean = 37.9346
