./boost_hash,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=23,mops=39
./boost_hash,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=22,mops=39
./boost_hash,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=7,mops=13
./boost_hash,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=7,mops=13

./boost_hash,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=22,mops=37
./boost_hash,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=22,mops=37
./boost_hash,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=7,mops=12
./boost_hash,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=7,mops=12

./boost_hash,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=21,mops=32
./boost_hash,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=22,mops=32
./boost_hash,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=7,mops=10
./boost_hash,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=27,insert_mops=7,mops=10

./boost_hash,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=37
./boost_hash,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=37
./boost_hash,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=7,mops=17
./boost_hash,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=7,mops=18

./boost_hash,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=19,mops=37
./boost_hash,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=20,mops=37
./boost_hash,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=7,mops=15
./boost_hash,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=7,mops=15

./boost_hash,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=22,mops=32
./boost_hash,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=20,mops=32
./boost_hash,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=7,mops=13
./boost_hash,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=27,insert_mops=7,mops=13

./boost_hash,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=20,mops=40
./boost_hash,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=22,mops=40
./boost_hash,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=8,mops=13
./boost_hash,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=17,insert_mops=8,mops=13

./boost_hash,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=4,mops=20
./boost_hash,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=4,mops=19
./boost_hash,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=4,mops=18
./boost_hash,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=4,mops=17
./boost_hash,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=4,mops=14
./boost_hash,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=111,insert_mops=4,mops=14
initial insert geometric mean of mops = 5.85558
benchmark geometric mean of mops = 21.5414
bytes/element geometric mean = 37.9346
