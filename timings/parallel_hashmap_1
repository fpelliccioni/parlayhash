./parallel_hashmap,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=38,mops=38
./parallel_hashmap,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=36,mops=37
./parallel_hashmap,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=33,insert_mops=14,mops=16
./parallel_hashmap,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=33,insert_mops=13,mops=16

./parallel_hashmap,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=34,mops=36
./parallel_hashmap,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=36,mops=36
./parallel_hashmap,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=33,insert_mops=13,mops=14
./parallel_hashmap,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=33,insert_mops=12,mops=14

./parallel_hashmap,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=36,mops=29
./parallel_hashmap,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=36,mops=29
./parallel_hashmap,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=33,insert_mops=12,mops=12
./parallel_hashmap,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=33,insert_mops=12,mops=11

./parallel_hashmap,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=36,mops=40
./parallel_hashmap,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=36,mops=40
./parallel_hashmap,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=33,insert_mops=12,mops=14
./parallel_hashmap,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=33,insert_mops=11,mops=19

./parallel_hashmap,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=36,mops=38
./parallel_hashmap,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=36,mops=37
./parallel_hashmap,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=33,insert_mops=12,mops=17
./parallel_hashmap,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=33,insert_mops=12,mops=18

./parallel_hashmap,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=34,mops=30
./parallel_hashmap,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=36,mops=30
./parallel_hashmap,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=33,insert_mops=12,mops=16
./parallel_hashmap,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=33,insert_mops=12,mops=15

./parallel_hashmap,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=16,insert_mops=33,mops=37
./parallel_hashmap,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=16,insert_mops=34,mops=37
./parallel_hashmap,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=10,insert_mops=14,mops=18
./parallel_hashmap,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=10,insert_mops=14,mops=18

./parallel_hashmap,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=138,insert_mops=6,mops=16
./parallel_hashmap,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=138,insert_mops=6,mops=16
./parallel_hashmap,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=138,insert_mops=6,mops=15
./parallel_hashmap,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=138,insert_mops=6,mops=15
./parallel_hashmap,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=138,insert_mops=6,mops=13
./parallel_hashmap,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=138,insert_mops=6,mops=13

initial insert geometric mean of mops = 10.6902
benchmark geometric mean of mops = 22.028
bytes/element geometric mean = 36.021
