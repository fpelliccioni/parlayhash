./std_hash,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=41,insert_mops=36,mops=34
./std_hash,0%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=41,insert_mops=36,mops=33
./std_hash,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=7,mops=8
./std_hash,0%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=7,mops=8

./std_hash,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=41,insert_mops=29,mops=30
./std_hash,10%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=41,insert_mops=29,mops=30
./std_hash,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=7,mops=7
./std_hash,10%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=6,mops=7

./std_hash,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=41,insert_mops=23,mops=22
./std_hash,50%update,n=10000,p=1,long_long,z=0,grow=0,mem_pe=41,insert_mops=29,mops=22
./std_hash,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=6,mops=5
./std_hash,50%update,n=10000000,p=1,long_long,z=0,grow=0,mem_pe=40,insert_mops=6,mops=5

./std_hash,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=41,insert_mops=34,mops=39
./std_hash,0%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=41,insert_mops=35,mops=39
./std_hash,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=6,mops=8
./std_hash,0%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=6,mops=8

./std_hash,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=41,insert_mops=29,mops=39
./std_hash,10%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=41,insert_mops=29,mops=39
./std_hash,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=6,mops=8
./std_hash,10%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=6,mops=9

./std_hash,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=41,insert_mops=32,mops=28
./std_hash,50%update,n=10000,p=1,long_long,z=0.99,grow=0,mem_pe=41,insert_mops=24,mops=28
./std_hash,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=7,mops=7
./std_hash,50%update,n=10000000,p=1,long_long,z=0.99,grow=0,mem_pe=40,insert_mops=6,mops=7

./std_hash,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=25,insert_mops=34,mops=32
./std_hash,10%update,n=10000,p=1,int,z=0,grow=0,mem_pe=25,insert_mops=31,mops=32
./std_hash,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=24,insert_mops=8,mops=7
./std_hash,10%update,n=10000000,p=1,int,z=0,grow=0,mem_pe=24,insert_mops=8,mops=7

./std_hash,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=90,insert_mops=3,mops=6
./std_hash,0%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=90,insert_mops=3,mops=6
./std_hash,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=90,insert_mops=3,mops=6
./std_hash,10%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=90,insert_mops=3,mops=6
./std_hash,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=90,insert_mops=2,mops=4
./std_hash,50%update,n=1229916,p=1,string_4xlong,trigram,grow=0,mem_pe=90,insert_mops=2,mops=5
initial insert geometric mean of mops = 4.59301
benchmark geometric mean of mops = 13.0662
bytes/element geometric mean = 44.6695
